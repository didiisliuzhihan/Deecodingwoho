1. This is an hourglass clock that uses "Dee" as its unit of time. Instead of the traditional flow of sand, I’ve replaced it with alternating day and night illustrations to represent the passage of time. A unique detail is that if you focus on the upper half of the hourglass as the primary view, every two cycles of day and night create a misalignment with the background color. This represents the idea that when it’s daytime on one side of the world, it’s nighttime on the other. Just like the 12-hour difference between the U.S. and China, my family, friends, and loved ones experience a reversed day and night cycle compared to me. I wanted to capture this global perspective in my design, rather than sticking to a single, localized view of time.
To bring this hourglass to life, I learned more flexible techniques with the beginShape() and endShape() functions, and revisited Boolean logic and timer-based code. However, I realized there are still many things I learned in class that I’ve forgotten—it feels like coding gets harder the longer I go without practice. If I don’t code for three days, I end up forgetting 80% of what I knew. My initial sketches included a snot-swinging pendulum clock and an hourglass with 60 colorful beads falling one by one, representing a person’s 60 years of life. I found the first idea a bit boring, and the snot-swing pendulum was hard to make look the way I wanted. The second one ended up being too complex. I got halfway through and realized I would need to set up Colliders for the beads, which made me think, "I might as well just make this in Unity!QQQ"
 Throughout this process, I learned more flexible drawing techniques with beginShape() and endShape(), more complex if/else logic, and how to use vertices more effectively. My favorite part was the freedom to design unconventional clocks with code, which sparked many creative ideas. Unfortunately, in the end, I had to stick with the simplest version due to difficulty. It’s definitely challenging, but also a valuable learning experience.